import { useState } from 'react'
import Head from 'next/head'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import Header from '@/components/Header'
import BasicTemplate from '@/components/Templates/BasicTemplate'
import Animation from '@/components/Animation'
import  TodoList  from '../components/TodoList.json'

const inter = Inter({ subsets: ['latin'] })

interface TodoInterface {
  id: number;
  text: string;
  isCompleted: boolean;
  isChildTodo: boolean;
  parentTodo: Array<TodoInterface>;
}

export default function Todo() {

  const [todo, setTodo] = useState<Array<TodoInterface>>(TodoList.parentTodo)
  const [inputItem, setInputItem] = useState<string>("");
  const [visible, setVisible] = useState(false);

  const changeCompleted = (todo: Array<TodoInterface>, id: number) => {

    let trueFlag = false;
    todo.map((item) => {
      if (item.id === id) {
        item.isCompleted =!item.isCompleted;
        trueFlag = true;
      }
      changeCompleted(item.parentTodo, id);
    })
    return todo
  }
  const deleteItem = (id: number) => {
    let updateTodo = todo; // clone

    updateTodo = changeCompleted(updateTodo, id);
    setTodo([...updateTodo]);
    
    if(updateTodo.every(item => item.isCompleted === true)) {
      setVisible(true); // set visible to true
    };
  };

  const insertItem = () => {
    if(inputItem === "") return; // validation

    let newTodo = todo; // clone
    let maximum = 0;
    if(newTodo.length !== 0) {
      maximum = Math.max(...newTodo.map(item => item.id)); //find max id
    }
    newTodo.push({
      id: maximum + 1,
      text: inputItem,
      isCompleted: false,
      isChildTodo: false,
      parentTodo: []
    });

    setTodo(newTodo);
    setInputItem(""); // clear input

    setVisible(false); // set visible to false
  };

  const FirstTodoArray = (props: Array<TodoInterface>) => {
    const todoArray = Object.entries(props).map(([key, value]) => (value)); // Change type Object to Array
    
    return (
      <>
        {TodoArray(todoArray)}
      </>
    )
  };
  const TodoArray = (parentTodo: Array<TodoInterface>) => {
    return (
      <>
        {parentTodo.map((item, index) => (
        <tr key={item.id}>
          <td>{item.isCompleted? null : item.text}</td>
          <td>
          {item.isCompleted || item.isChildTodo? null : <button onClick={()=>deleteItem(item.id)}>完了</button> }
          {item.isChildTodo?
            <table>
              <thead>
                  <tr>
                    <th>TODO</th>
                    <th>Status</th>
                  </tr>
                </thead>
              <tbody>
                {TodoArray(item.parentTodo)}
              </tbody>
            </table>
          : null
          }
          </td>
        </tr>
      ))}
      </>
    )
  };

  return (
    <>
      <Head>
        <title>My Portfolio</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <BasicTemplate>
        <main className={styles.main}>
          <h1>ToDo リスト</h1>
          <div>
            <input type="text" placeholder="ToDoを追加" onChange={(e) => setInputItem(e.target.value)} value={inputItem}/>
            <button onClick={()=>insertItem()}>追加</button>
          </div>

          <table>
            <thead>
                <tr>
                  <th>TODO</th>
                  <th>Status</th>
                </tr>
              </thead>
            <tbody>
              <FirstTodoArray {...todo} />
            </tbody>
          </table>
          {visible === true ? <Animation /> : null}
        </main>
      </BasicTemplate>
      
    </>
  )
}
